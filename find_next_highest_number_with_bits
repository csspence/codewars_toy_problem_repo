/*
Your task is to find the next higher number (int) with same '1'- Bits.

I.e. as much 1 bits as before and output next higher than input. Input is always an int in between 1 and 1<<30 (inclusive). No bad cases or special tricks...

Some easy examples:
Input: 129  => Output: 130 (10000001 => 10000010)
Input: 127 => Output: 191 (01111111 => 10111111)
Input: 1 => Output: 2 (01 => 10)
Input: 323423 => Output: 323439 (1001110111101011111 => 1001110111101101111)
First some static tests, later on many random tests too;-)!
*/

const nextHigher = (n) => {
  const convert = (number) => {
    let num = number;
    let binary = (num % 2).toString();
    for (; num > 1; ) {
        num = parseInt(num / 2);
        binary =  (num % 2) + (binary);
    }
    return binary;
  }
  const counter = (number) => {
    let bit = convert(number);
    let ones = 0;
    for(let i = 0; i < bit.length; i++) {
      if(bit[i] === '1') {
        ones++;
      }
    }
    return ones;
  }
  const nBits = counter(n);
  let current = n + 1;
  while(current) {
    if(counter(current) === nBits) {
      return current;
    } else {
      current++;
    }
  }
}
